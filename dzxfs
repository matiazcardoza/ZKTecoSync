estoy desarrollando una app:
esta es su estructura:
üìÅ tu_proyecto/
‚îú‚îÄ‚îÄ üìÅ dist/
‚îÇ   ‚îú‚îÄ‚îÄ ZKTeco-Sync.exe          
‚îÇ   ‚îî‚îÄ‚îÄ zkteco_service.exe       
‚îú‚îÄ‚îÄ install_service.bat          
    @echo off
setlocal enabledelayedexpansion

echo ==========================================
echo Instalando servicio ZKTeco Sync...
echo ==========================================
echo.

REM Verificar privilegios de administrador
net session >nul 2>&1
if %errorlevel% neq 0 (
    echo ERROR: Este script debe ejecutarse como Administrador
    echo.
    echo Solucion:
    echo 1. Click derecho en el archivo install_service.bat
    echo 2. Seleccionar "Ejecutar como administrador"
    echo.
    pause
    exit /b 1
)

REM Cambiar al directorio de la aplicaci√≥n
cd /d "%~dp0"

REM Verificar si el ejecutable del servicio existe
if not exist "zkteco_service.exe" (
    echo ERROR: No se encontr√≥ zkteco_service.exe
    echo Verifique que el archivo est√© presente en la carpeta de instalaci√≥n.
    echo Directorio actual: %CD%
    pause
    exit /b 1
)

echo Verificando si el servicio ya existe...
sc query ZKTecoSync >nul 2>&1
if %errorlevel% == 0 (
    echo El servicio ya existe. Deteni√©ndolo primero...
    net stop ZKTecoSync >nul 2>&1
    if %errorlevel% == 0 (
        echo ‚úì Servicio detenido
    ) else (
        echo ! El servicio no estaba ejecut√°ndose
    )
    
    echo Eliminando servicio existente...
    zkteco_service.exe remove >nul 2>&1
    if %errorlevel% neq 0 (
        echo Intentando eliminaci√≥n manual...
        sc delete ZKTecoSync >nul 2>&1
    )
    echo ‚úì Servicio anterior eliminado
    timeout /t 3 /nobreak >nul
)

echo.
echo Instalando nuevo servicio...
zkteco_service.exe install
if %errorlevel% neq 0 (
    echo ERROR: No se pudo instalar el servicio.
    echo C√≥digo de error: %errorlevel%
    echo.
    echo Posibles causas:
    echo - Falta permisos de administrador
    echo - Antivirus bloqueando la instalaci√≥n
    echo - Puerto 3322 ya est√° en uso por otro programa
    echo.
    pause
    exit /b 1
)

echo ‚úì Servicio instalado correctamente

echo.
echo Configurando inicio autom√°tico...
sc config ZKTecoSync start= auto
if %errorlevel% neq 0 (
    echo ADVERTENCIA: No se pudo configurar el inicio autom√°tico.
    echo El servicio deber√° iniciarse manualmente.
) else (
    echo ‚úì Inicio autom√°tico configurado
)

echo.
echo Configurando descripci√≥n del servicio...
sc description ZKTecoSync "Servicio de sincronizaci√≥n para dispositivos ZKTeco - Proporciona API REST en puerto 3322"
if %errorlevel% == 0 (
    echo ‚úì Descripci√≥n configurada
)

echo.
echo Iniciando servicio autom√°ticamente...
net start ZKTecoSync
if %errorlevel% neq 0 (
    echo ERROR: No se pudo iniciar el servicio.
    echo.
    echo Posibles causas:
    echo - Puerto 3322 ya est√° en uso
    echo - Faltan dependencias de Python
    echo - Error en la configuraci√≥n del servicio
    echo.
    echo Revise el log del servicio en: logs\service.log
    echo Tambi√©n puede verificar en el Visor de eventos de Windows
    echo.
    pause
    exit /b 1
)

echo ‚úì Servicio iniciado correctamente y ejecut√°ndose en segundo plano

REM Esperar un momento para que el servicio se inicie completamente
echo.
echo Verificando que el servicio est√© funcionando...
timeout /t 5 /nobreak >nul

REM Intentar hacer una petici√≥n HTTP para verificar
curl -s "http://127.0.0.1:3322/estado" >nul 2>&1
if %errorlevel% == 0 (
    echo ‚úì API REST funcionando correctamente
) else (
    echo ! No se pudo verificar la API REST
    echo   Esto es normal si curl no est√° instalado
)

echo.
echo ==========================================
echo ‚úì Servicio ZKTeco Sync instalado correctamente
echo ==========================================
echo.
echo IMPORTANTE: El servicio ahora se ejecuta autom√°ticamente en segundo plano
echo y se iniciar√° autom√°ticamente con Windows.
echo.
echo Estado del servicio:
sc query ZKTecoSync | findstr "STATE"
echo.
echo El servidor est√° disponible en: http://127.0.0.1:3322
echo Para verificar el estado: http://127.0.0.1:3322/estado
echo.
echo La aplicaci√≥n GUI (ZKTeco-Sync.exe) ahora puede usarse como cliente
echo sin necesidad de mantener el servidor activo manualmente.
echo.
echo Comandos √∫tiles:
echo - Detener servicio: net stop ZKTecoSync
echo - Iniciar servicio: net start ZKTecoSync
echo - Ver logs: notepad logs\service.log
echo.
echo Presione cualquier tecla para continuar...
pause >nul
exit /b 0
‚îú‚îÄ‚îÄ main.py
‚îÇ   import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext
import requests
import json
import threading
import time
import os
import sys
from datetime import datetime

class ZKTecoSyncGUI:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("ZKTeco Sync - Cliente GUI v1.1")
        self.root.geometry("800x600")
        self.root.resizable(True, True)
        
        # Variables de estado
        self.service_connected = False
        self.device_info = {}
        self.last_status_check = None
        
        # Configurar cierre de ventana - MODIFICADO: Ya no pregunta sobre mantener servidor
        self.root.protocol("WM_DELETE_WINDOW", self.on_closing)
        
        # Crear interfaz
        self.create_interface()
        
        # Verificar conexi√≥n inicial con el servicio
        self.check_initial_connection()
        
        # Iniciar actualizaci√≥n peri√≥dica de estado
        self.start_status_updates()
    
    def create_interface(self):
        """Crear la interfaz gr√°fica"""
        # Frame principal
        main_frame = ttk.Frame(self.root, padding="10")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # Configurar expansi√≥n
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        main_frame.columnconfigure(1, weight=1)
        main_frame.rowconfigure(2, weight=1)
        
        # T√≠tulo
        title_label = ttk.Label(main_frame, text="ZKTeco Sync - Cliente GUI", 
                               font=("Arial", 16, "bold"))
        title_label.grid(row=0, column=0, columnspan=2, pady=(0, 20))
        
        # Frame de estado del servicio
        status_frame = ttk.LabelFrame(main_frame, text="Estado del Servicio", padding="10")
        status_frame.grid(row=1, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 10))
        status_frame.columnconfigure(1, weight=1)
        
        # Estado del servicio
        ttk.Label(status_frame, text="Servicio:").grid(row=0, column=0, sticky=tk.W, padx=(0, 10))
        self.service_status_label = ttk.Label(status_frame, text="üî¥ Verificando...", 
                                            foreground="orange")
        self.service_status_label.grid(row=0, column=1, sticky=tk.W)
        
        # Estado del dispositivo
        ttk.Label(status_frame, text="Dispositivo:").grid(row=1, column=0, sticky=tk.W, padx=(0, 10))
        self.device_status_label = ttk.Label(status_frame, text="üî¥ Sin informaci√≥n", 
                                           foreground="red")
        self.device_status_label.grid(row=1, column=1, sticky=tk.W)
        
        # Informaci√≥n del dispositivo
        ttk.Label(status_frame, text="Info:").grid(row=2, column=0, sticky=tk.W, padx=(0, 10))
        self.device_info_label = ttk.Label(status_frame, text="No disponible")
        self.device_info_label.grid(row=2, column=1, sticky=tk.W)
        
        # Botones de control
        button_frame = ttk.Frame(status_frame)
        button_frame.grid(row=3, column=0, columnspan=2, pady=(10, 0))
        
        self.refresh_button = ttk.Button(button_frame, text="üîÑ Actualizar Estado", 
                                       command=self.manual_refresh)
        self.refresh_button.pack(side=tk.LEFT, padx=(0, 10))
        
        self.restart_service_button = ttk.Button(button_frame, text="üîÑ Reiniciar Servicio", 
                                               command=self.restart_service)
        self.restart_service_button.pack(side=tk.LEFT, padx=(0, 10))
        
        self.open_config_button = ttk.Button(button_frame, text="‚öôÔ∏è Configuraci√≥n", 
                                           command=self.open_config)
        self.open_config_button.pack(side=tk.LEFT)
        
        # Frame de logs
        log_frame = ttk.LabelFrame(main_frame, text="Registro de Actividad", padding="10")
        log_frame.grid(row=2, column=0, columnspan=2, sticky=(tk.W, tk.E, tk.N, tk.S), pady=(10, 0))
        log_frame.columnconfigure(0, weight=1)
        log_frame.rowconfigure(0, weight=1)
        
        # √Årea de texto para logs
        self.log_text = scrolledtext.ScrolledText(log_frame, height=15, width=70)
        self.log_text.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # Bot√≥n para limpiar logs
        clear_log_button = ttk.Button(log_frame, text="üóëÔ∏è Limpiar Log", 
                                    command=self.clear_log)
        clear_log_button.grid(row=1, column=0, sticky=tk.E, pady=(5, 0))
        
        # Frame de informaci√≥n - MODIFICADO: Actualizada la informaci√≥n
        info_frame = ttk.LabelFrame(main_frame, text="Informaci√≥n", padding="10")
        info_frame.grid(row=3, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(10, 0))
        
        info_text = ("Esta aplicaci√≥n es un cliente que se conecta al servicio ZKTeco Sync instalado "
                    "en el sistema. El servicio se ejecuta en segundo plano y proporciona la API REST "
                    "en el puerto 3322. Para que funcione correctamente, el servicio debe estar instalado "
                    "y ejecut√°ndose.")
        ttk.Label(info_frame, text=info_text, wraplength=750).pack()
        
        # Agregar log inicial
        self.add_log("=== Cliente GUI ZKTeco Sync iniciado ===")
        self.add_log("MODO: Solo cliente - El servicio debe estar instalado y ejecut√°ndose")
    
    def check_initial_connection(self):
        """Verificar conexi√≥n inicial con el servicio"""
        self.add_log("Verificando conexi√≥n con el servicio ZKTeco Sync...")
        
        if self.check_service_status():
            self.add_log("‚úì Conectado al servicio ZKTeco Sync")
            self.update_service_info()
        else:
            self.add_log("‚ö†Ô∏è No se pudo conectar al servicio")
            self.add_log("Verificando si el servicio est√° instalado...")
            
            # Verificar si el servicio est√° instalado
            result = os.system('sc query ZKTecoSync >nul 2>&1')
            if result == 0:
                self.add_log("‚úì Servicio ZKTeco Sync encontrado")
                self.add_log("Intentando iniciar el servicio...")
                if self.start_service_if_needed():
                    self.add_log("‚úì Servicio iniciado correctamente")
                    time.sleep(3)  # Dar tiempo a que inicie completamente
                    self.update_service_info()
                else:
                    self.add_log("‚ùå No se pudo iniciar el servicio")
                    self.show_service_error()
            else:
                self.add_log("‚ùå Servicio ZKTeco Sync no est√° instalado")
                self.show_service_not_installed_error()
    
    def check_service_status(self):
        """Verificar si el servicio est√° ejecut√°ndose"""
        try:
            response = requests.get("http://127.0.0.1:3322/estado", timeout=5)
            if response.status_code == 200:
                data = response.json()
                self.service_connected = data.get('status') == 'servicio activo'
                return self.service_connected
        except requests.exceptions.RequestException:
            pass
        
        self.service_connected = False
        return False
    
    def get_service_info(self):
        """Obtener informaci√≥n del servicio"""
        try:
            response = requests.get("http://127.0.0.1:3322/info", timeout=5)
            if response.status_code == 200:
                return response.json()
        except requests.exceptions.RequestException:
            pass
        return None
    
    def ping_device(self):
        """Verificar estado del dispositivo"""
        try:
            response = requests.get("http://127.0.0.1:3322/ping-device", timeout=5)
            if response.status_code == 200:
                return response.json()
        except requests.exceptions.RequestException:
            pass
        return None
    
    def start_service_if_needed(self):
        """Intentar iniciar el servicio si no est√° ejecut√°ndose"""
        if not self.check_service_status():
            try:
                # Intentar iniciar el servicio
                result = os.system("net start ZKTecoSync >nul 2>&1")
                if result == 0:
                    self.add_log("Comando 'net start ZKTecoSync' ejecutado exitosamente")
                    time.sleep(5)  # Esperar m√°s tiempo a que inicie
                    return self.check_service_status()
                else:
                    self.add_log(f"Error al ejecutar 'net start': c√≥digo {result}")
                    return False
            except Exception as e:
                self.add_log(f"Error iniciando servicio: {e}")
                return False
        return True
    
    def restart_service(self):
        """Reiniciar el servicio"""
        self.add_log("Reiniciando servicio ZKTeco Sync...")
        
        try:
            # Detener servicio
            self.add_log("Deteniendo servicio...")
            os.system("net stop ZKTecoSync >nul 2>&1")
            time.sleep(3)
            
            # Iniciar servicio
            self.add_log("Iniciando servicio...")
            result = os.system("net start ZKTecoSync >nul 2>&1")
            
            if result == 0:
                time.sleep(5)
                if self.check_service_status():
                    self.add_log("‚úì Servicio reiniciado correctamente")
                    self.update_service_info()
                else:
                    self.add_log("‚ùå El servicio no responde despu√©s del reinicio")
            else:
                self.add_log("‚ùå Error al reiniciar el servicio")
                
        except Exception as e:
            self.add_log(f"Error durante el reinicio: {e}")
    
    def update_service_info(self):
        """Actualizar informaci√≥n del servicio en la interfaz"""
        if self.check_service_status():
            # Servicio activo
            self.service_status_label.config(text="üü¢ Servicio activo", foreground="green")
            
            # Obtener informaci√≥n del servicio
            info = self.get_service_info()
            if info:
                self.device_info = info
                device_info_text = info.get('device_info', {})
                
                if device_info_text:
                    info_str = f"{device_info_text.get('dispositivo', 'N/A')} - {device_info_text.get('ip', 'N/A')}:{device_info_text.get('puerto', 'N/A')}"
                    self.device_info_label.config(text=info_str)
                else:
                    self.device_info_label.config(text="Configuraci√≥n no encontrada")
                
                # Verificar estado del dispositivo
                device_ping = self.ping_device()
                if device_ping:
                    if device_ping.get('dispositivo_conectado', False):
                        self.device_status_label.config(text="üü¢ Dispositivo conectado", foreground="green")
                    else:
                        self.device_status_label.config(text="üî¥ Dispositivo desconectado", foreground="red")
                else:
                    self.device_status_label.config(text="üî¥ Sin informaci√≥n", foreground="red")
            else:
                self.device_info_label.config(text="Error obteniendo informaci√≥n")
        else:
            # Servicio inactivo
            self.service_status_label.config(text="üî¥ Servicio inactivo", foreground="red")
            self.device_status_label.config(text="üî¥ Sin informaci√≥n", foreground="red")
            self.device_info_label.config(text="Servicio no disponible")
    
    def start_status_updates(self):
        """Iniciar actualizaciones peri√≥dicas de estado"""
        def update_loop():
            while True:
                try:
                    self.root.after(0, self.update_service_info)
                    time.sleep(30)  # Actualizar cada 30 segundos
                except:
                    break
        
        update_thread = threading.Thread(target=update_loop, daemon=True)
        update_thread.start()
    
    def manual_refresh(self):
        """Actualizaci√≥n manual del estado"""
        self.add_log("Actualizando estado manualmente...")
        self.update_service_info()
    
    def open_config(self):
        """Abrir archivo de configuraci√≥n"""
        try:
            # Buscar el archivo de configuraci√≥n en la ubicaci√≥n de instalaci√≥n
            possible_paths = [
                os.path.join(os.path.dirname(__file__), 'config', 'device.json'),
                os.path.join(os.environ.get('ProgramFiles', ''), 'ZKTeco Sync', 'config', 'device.json'),
                os.path.join(os.path.dirname(sys.executable), 'config', 'device.json')
            ]
            
            config_path = None
            for path in possible_paths:
                if os.path.exists(path):
                    config_path = path
                    break
            
            if config_path:
                os.startfile(config_path)
                self.add_log(f"Abriendo configuraci√≥n: {config_path}")
            else:
                self.add_log("‚ùå Archivo de configuraci√≥n no encontrado")
                messagebox.showwarning("Archivo no encontrado", 
                                     "No se encontr√≥ el archivo de configuraci√≥n.\n\n"
                                     "Ubicaciones verificadas:\n" + "\n".join(possible_paths))
        except Exception as e:
            self.add_log(f"Error abriendo configuraci√≥n: {e}")
            messagebox.showerror("Error", f"No se pudo abrir la configuraci√≥n:\n{e}")
    
    def show_service_error(self):
        """Mostrar error de conexi√≥n con el servicio"""
        messagebox.showwarning(
            "Servicio no disponible",
            "No se pudo conectar al servicio ZKTeco Sync.\n\n"
            "Posibles causas:\n"
            "‚Ä¢ El servicio no est√° ejecut√°ndose\n"
            "‚Ä¢ El puerto 3322 est√° bloqueado por firewall\n"
            "‚Ä¢ Error en el servicio\n\n"
            "Soluciones:\n"
            "‚Ä¢ Use el bot√≥n 'Reiniciar Servicio'\n"
            "‚Ä¢ Verifique los logs del servicio\n"
            "‚Ä¢ Reinstale el servicio si es necesario"
        )
    
    def show_service_not_installed_error(self):
        """Mostrar error cuando el servicio no est√° instalado"""
        messagebox.showerror(
            "Servicio no instalado",
            "El servicio ZKTeco Sync no est√° instalado en el sistema.\n\n"
            "Para usar esta aplicaci√≥n debe:\n\n"
            "1. Ejecutar el instalador nuevamente\n"
            "2. Marcar la opci√≥n 'Instalar servicio de Windows'\n"
            "3. Completar la instalaci√≥n\n\n"
            "O ejecutar manualmente 'install_service.bat' como Administrador"
        )
    
    def add_log(self, message):
        """Agregar mensaje al log"""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        log_message = f"[{timestamp}] {message}\n"
        
        # Agregar al widget de texto
        self.log_text.insert(tk.END, log_message)
        self.log_text.see(tk.END)  # Scroll autom√°tico
        
        # Limitar n√∫mero de l√≠neas (mantener √∫ltimas 1000)
        lines = self.log_text.get("1.0", tk.END).split('\n')
        if len(lines) > 1000:
            self.log_text.delete("1.0", f"{len(lines)-1000}.0")
    
    def clear_log(self):
        """Limpiar el √°rea de log"""
        self.log_text.delete("1.0", tk.END)
        self.add_log("=== Log limpiado ===")
    
    def on_closing(self):
        """Manejar cierre de la aplicaci√≥n - SIMPLIFICADO"""
        # Ya no pregunta sobre mantener el servidor porque el servicio es independiente
        self.add_log("=== Cerrando cliente GUI ===")
        self.add_log("El servicio ZKTeco Sync continuar√° ejecut√°ndose en segundo plano")
        self.root.destroy()
    
    def run(self):
        """Ejecutar la aplicaci√≥n"""
        try:
            self.root.mainloop()
        except KeyboardInterrupt:
            self.add_log("Aplicaci√≥n interrumpida por el usuario")
        except Exception as e:
            self.add_log(f"Error en la aplicaci√≥n: {e}")
            messagebox.showerror("Error", f"Error en la aplicaci√≥n:\n{e}")


def main():
    """Funci√≥n principal"""
    try:
        # Crear y ejecutar la aplicaci√≥n
        app = ZKTecoSyncGUI()
        app.run()
    except Exception as e:
        messagebox.showerror("Error Fatal", f"Error al iniciar la aplicaci√≥n:\n{e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
‚îú‚îÄ‚îÄ zkteco_service.py           
          import sys
import os
import time
import json
import socket
import threading
from datetime import datetime

# Importaciones de servicio de Windows
import win32serviceutil
import win32service
import win32event
import servicemanager

# Importaciones para Flask
from flask import Flask, jsonify
from flask_cors import CORS

# Importaciones para ZKTeco
try:
    from zk import ZK
    ZK_AVAILABLE = True
except ImportError:
    ZK_AVAILABLE = False

class ZKTecoService(win32serviceutil.ServiceFramework):
    _svc_name_ = "ZKTecoSync"
    _svc_display_name_ = "ZKTeco Sync Service"
    _svc_description_ = "Servicio de sincronizaci√≥n para dispositivos ZKTeco - API REST en puerto 3322"
    
    def __init__(self, args):
        win32serviceutil.ServiceFramework.__init__(self, args)
        self.hWaitStop = win32event.CreateEvent(None, 0, 0, None)
        self.running = True
        
        # Variables del servicio
        self.flask_app = None
        self.flask_thread = None
        self.device_connection = None
        self.system_params = None
        
        # Log del servicio
        self.log_file = os.path.join(os.path.dirname(__file__), 'logs', 'service.log')
        os.makedirs(os.path.dirname(self.log_file), exist_ok=True)

    def SvcStop(self):
        """Detener el servicio"""
        self.ReportServiceStatus(win32service.SERVICE_STOP_PENDING)
        win32event.SetEvent(self.hWaitStop)
        self.running = False
        self.log_service("Servicio detenido")

    def SvcDoRun(self):
        """Ejecutar el servicio"""
        servicemanager.LogMsg(
            servicemanager.EVENTLOG_INFORMATION_TYPE,
            servicemanager.PYS_SERVICE_STARTED,
            (self._svc_name_, '')
        )
        
        self.log_service("Iniciando servicio ZKTeco Sync...")
        self.main()

    def log_service(self, message):
        """Log del servicio"""
        try:
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            with open(self.log_file, 'a', encoding='utf-8') as f:
                f.write(f"[{timestamp}] {message}\n")
        except Exception as e:
            print(f"Error escribiendo log: {e}")

    def is_port_in_use(self, port):
        """Verificar si un puerto est√° en uso"""
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            return s.connect_ex(('127.0.0.1', port)) == 0

    def load_device_params(self):
        """Cargar par√°metros del dispositivo desde archivo de configuraci√≥n"""
        try:
            config_file = os.path.join(os.path.dirname(__file__), 'config', 'device.json')
            if os.path.exists(config_file):
                with open(config_file, 'r', encoding='utf-8') as f:
                    self.system_params = json.load(f)
                    self.log_service(f"Par√°metros cargados: {self.system_params.get('name', 'N/A')}")
                    return True
            else:
                self.log_service("No se encontr√≥ archivo de configuraci√≥n")
                return False
        except Exception as e:
            self.log_service(f"Error cargando configuraci√≥n: {e}")
            return False

    def init_flask_server(self):
        """Inicializar servidor Flask"""
        try:
            self.flask_app = Flask(__name__)
            CORS(self.flask_app)
            
            # Ruta para verificar estado
            @self.flask_app.route('/estado', methods=['GET'])
            def estado():
                return jsonify({
                    'status': 'servicio activo',
                    'instalado': True,
                    'version': '1.1',
                    'tipo': 'servicio_windows',
                    'conectado': self.device_connection is not None,
                    'timestamp': datetime.now().isoformat()
                })
            
            @self.flask_app.route('/info', methods=['GET'])
            def info():
                device_info = {}
                if self.system_params:
                    device_info = {
                        'dispositivo': self.system_params.get('name', 'N/A'),
                        'ip': self.system_params.get('ip_address', 'N/A'),
                        'puerto': self.system_params.get('port', 'N/A')
                    }
                
                return jsonify({
                    'aplicacion': 'ZKTeco Sync Service',
                    'version': '1.1',
                    'estado': 'servicio activo',
                    'tipo': 'servicio_windows',
                    'dispositivo_configurado': bool(self.system_params),
                    'dispositivo_conectado': self.device_connection is not None,
                    'device_info': device_info
                })
            
            @self.flask_app.route('/ping-device', methods=['GET'])
            def ping_device():
                return jsonify({
                    'dispositivo_conectado': self.device_connection is not None,
                    'puede_sincronizar': self.device_connection is not None and bool(self.system_params)
                })

            def run_flask():
                try:
                    self.flask_app.run(
                        port=3322,
                        host='127.0.0.1',
                        debug=False,
                        use_reloader=False,
                        threaded=True
                    )
                except Exception as e:
                    self.log_service(f"Error en servidor Flask: {e}")

            self.flask_thread = threading.Thread(target=run_flask, daemon=True)
            self.flask_thread.start()
            
            self.log_service("Servidor Flask iniciado en puerto 3322")
            return True
            
        except Exception as e:
            self.log_service(f"Error configurando Flask: {e}")
            return False

    def test_device_connection(self):
        """Probar conexi√≥n con dispositivo cada 5 minutos"""
        while self.running:
            try:
                if self.system_params and ZK_AVAILABLE:
                    ip = self.system_params.get('ip_address')
                    port = int(self.system_params.get('port', 4370))
                    
                    zk = ZK(ip, port=port, timeout=5)
                    conn = zk.connect()
                    
                    if conn:
                        if not self.device_connection:
                            self.log_service(f"Conectado a dispositivo {ip}:{port}")
                        self.device_connection = conn
                    else:
                        if self.device_connection:
                            self.log_service(f"Perdida conexi√≥n con dispositivo {ip}:{port}")
                        self.device_connection = None
                        
                # Esperar 5 minutos antes de la siguiente verificaci√≥n
                for _ in range(300):  # 5 minutos = 300 segundos
                    if not self.running:
                        break
                    time.sleep(1)
                    
            except Exception as e:
                if self.device_connection:
                    self.log_service(f"Error de conexi√≥n: {e}")
                self.device_connection = None
                time.sleep(30)  # Esperar 30 segundos si hay error

    def main(self):
        """Funci√≥n principal del servicio"""
        try:
            # Verificar si el puerto ya est√° en uso
            if self.is_port_in_use(3322):
                self.log_service("ERROR: Puerto 3322 ya est√° en uso. Cerrando servicio.")
                return

            # Cargar configuraci√≥n del dispositivo
            self.load_device_params()
            
            # Inicializar servidor Flask
            if not self.init_flask_server():
                self.log_service("ERROR: No se pudo iniciar servidor Flask")
                return
            
            # Iniciar monitoreo de dispositivo en hilo separado
            device_thread = threading.Thread(target=self.test_device_connection, daemon=True)
            device_thread.start()
            
            self.log_service("Servicio ZKTeco iniciado correctamente")
            
            # Mantener el servicio ejecut√°ndose
            while self.running:
                # Esperar por se√±al de parada
                if win32event.WaitForSingleObject(self.hWaitStop, 1000) == win32event.WAIT_OBJECT_0:
                    break
                    
        except Exception as e:
            self.log_service(f"Error en servicio principal: {e}")
        finally:
            if self.device_connection:
                try:
                    self.device_connection.disconnect()
                except:
                    pass
            self.log_service("Servicio finalizado")


def create_default_config():
    """Crear archivo de configuraci√≥n por defecto"""
    config_dir = os.path.join(os.path.dirname(__file__), 'config')
    os.makedirs(config_dir, exist_ok=True)
    
    config_file = os.path.join(config_dir, 'device.json')
    if not os.path.exists(config_file):
        default_config = {
            "id": "1",
            "name": "Dispositivo ZKTeco",
            "ip_address": "192.168.1.100",
            "port": 4370
        }
        
        with open(config_file, 'w', encoding='utf-8') as f:
            json.dump(default_config, f, indent=2, ensure_ascii=False)
        
        print(f"Archivo de configuraci√≥n creado: {config_file}")
        print("IMPORTANTE: Edite este archivo con los datos de su dispositivo")


if __name__ == '__main__':
    if len(sys.argv) == 1:
        # Sin argumentos, crear configuraci√≥n por defecto
        create_default_config()
        print("\nUso:")
        print("  python zkteco_service.py install    - Instalar servicio")
        print("  python zkteco_service.py remove     - Desinstalar servicio")
        print("  python zkteco_service.py start      - Iniciar servicio")
        print("  python zkteco_service.py stop       - Detener servicio")
        print("  python zkteco_service.py debug      - Ejecutar en modo debug")
    elif 'debug' in sys.argv:
        # Modo debug para pruebas
        print("=== MODO DEBUG ===")
        service = ZKTecoService([])
        service.main()
    else:
        # Comandos de servicio de Windows
        win32serviceutil.HandleCommandLine(ZKTecoService)
‚îú‚îÄ‚îÄ build_exe.bat
      @echo off
setlocal enabledelayedexpansion

echo ==========================================
echo Construyendo ZKTeco Sync Application
echo ==========================================
echo.

REM Verificar si Python est√° instalado
python --version >nul 2>&1
if %errorlevel% neq 0 (
    echo ERROR: Python no est√° instalado o no est√° en el PATH
    echo.
    echo Instale Python desde: https://python.org/downloads/
    echo Aseg√∫rese de marcar "Add Python to PATH" durante la instalaci√≥n
    pause
    exit /b 1
)

echo ‚úì Python encontrado

REM Verificar si PyInstaller est√° instalado
python -c "import PyInstaller" >nul 2>&1
if %errorlevel% neq 0 (
    echo PyInstaller no encontrado. Instalando...
    pip install pyinstaller
    if %errorlevel% neq 0 (
        echo ERROR: No se pudo instalar PyInstaller
        pause
        exit /b 1
    )
)

echo ‚úì PyInstaller disponible

REM Verificar dependencias principales
echo Verificando dependencias...
python -c "import tkinter, flask, flask_cors, win32serviceutil, win32service, win32event, servicemanager" >nul 2>&1
if %errorlevel% neq 0 (
    echo ERROR: Faltan dependencias requeridas
    echo.
    echo Instale las dependencias con:
    echo pip install flask flask-cors pywin32 requests
    echo.
    echo Opcional (para funcionalidad ZKTeco):
    echo pip install pyzk
    pause
    exit /b 1
)

echo ‚úì Dependencias verificadas

REM Limpiar directorio de distribuci√≥n anterior
if exist "dist" (
    echo Limpiando directorio dist anterior...
    rmdir /s /q dist
)

if exist "build" (
    echo Limpiando directorio build anterior...
    rmdir /s /q build
)

echo ‚úì Directorios limpiados

REM Crear directorio dist
mkdir dist

echo.
echo ==========================================
echo Construyendo aplicaci√≥n GUI (main.py)
echo ==========================================

REM Construir aplicaci√≥n GUI principal
python -m PyInstaller ^
    --onefile ^
    --windowed ^
    --name=ZKTeco-Sync ^
    --icon=icon.ico ^
    --add-data="*.bat;." ^
    --hidden-import=tkinter ^
    --hidden-import=tkinter.ttk ^
    --hidden-import=flask ^
    --hidden-import=flask_cors ^
    --hidden-import=requests ^
    --hidden-import=json ^
    --hidden-import=threading ^
    --hidden-import=socket ^
    --hidden-import=datetime ^
    --exclude-module=matplotlib ^
    --exclude-module=numpy ^
    --exclude-module=pandas ^
    main.py

if %errorlevel% neq 0 (
    echo ERROR: Fall√≥ la construcci√≥n de la aplicaci√≥n GUI
    pause
    exit /b 1
)

echo ‚úì Aplicaci√≥n GUI construida exitosamente

echo.
echo ==========================================
echo Construyendo servicio Windows (zkteco_service.py)
echo ==========================================

REM Construir servicio de Windows
python -m PyInstaller ^
    --onefile ^
    --console ^
    --name=zkteco_service ^
    --hidden-import=win32serviceutil ^
    --hidden-import=win32service ^
    --hidden-import=win32event ^
    --hidden-import=servicemanager ^
    --hidden-import=flask ^
    --hidden-import=flask_cors ^
    --hidden-import=json ^
    --hidden-import=threading ^
    --hidden-import=socket ^
    --hidden-import=datetime ^
    --hidden-import=time ^
    --exclude-module=tkinter ^
    --exclude-module=matplotlib ^
    --exclude-module=numpy ^
    --exclude-module=pandas ^
    zkteco_service.py

if %errorlevel% neq 0 (
    echo ERROR: Fall√≥ la construcci√≥n del servicio
    pause
    exit /b 1
)

echo ‚úì Servicio Windows construido exitosamente

echo.
echo ==========================================
echo Organizando archivos de distribuci√≥n
echo ==========================================

REM Crear estructura de directorios en dist
mkdir "dist\logs" 2>nul
mkdir "dist\config" 2>nul

REM Copiar archivos de instalaci√≥n
copy "install_service.bat" "dist\" >nul
copy "uninstall_service.bat" "dist\" >nul

echo ‚úì Scripts de instalaci√≥n copiados

REM Crear archivo de configuraci√≥n por defecto
echo Creando configuraci√≥n por defecto...
(
echo {
echo   "id": "1",
echo   "name": "Dispositivo ZKTeco",
echo   "ip_address": "192.168.1.100",
echo   "port": 4370
echo }
) > "dist\config\device.json"

echo ‚úì Configuraci√≥n por defecto creada

REM Crear archivo README para la distribuci√≥n
echo Creando documentaci√≥n...
(
echo ZKTeco Sync Application v1.1
echo ============================
echo.
echo INSTALACI√ìN:
echo 1. Edite el archivo config\device.json con los datos de su dispositivo
echo 2. Ejecute install_service.bat como Administrador para instalar el servicio
echo 3. O ejecute ZKTeco-Sync.exe para usar la aplicaci√≥n con interfaz gr√°fica
echo.
echo ARCHIVOS INCLUIDOS:
echo - ZKTeco-Sync.exe: Aplicaci√≥n con interfaz gr√°fica
echo - zkteco_service.exe: Servicio de Windows
echo - install_service.bat: Instalador del servicio
echo - uninstall_service.bat: Desinstalador del servicio
echo - config\device.json: Configuraci√≥n del dispositivo
echo - logs\: Directorio para logs del servicio
echo.
echo CONFIGURACI√ìN:
echo Edite config\device.json con:
echo - ip_address: IP del dispositivo ZKTeco
echo - port: Puerto ^(generalmente 4370^)
echo - name: Nombre descriptivo del dispositivo
echo.
echo DEPENDENCIAS OPCIONALES:
echo Si encuentra errores de conexi√≥n ZKTeco, instale:
echo pip install pyzk
echo.
echo SOPORTE:
echo - Aplicaci√≥n GUI: Puerto 3322 ^(http://127.0.0.1:3322/estado^)
echo - Servicio Windows: Puerto 3322 ^(http://127.0.0.1:3322/estado^)
echo.
echo LOGS:
echo - Servicio: logs\service.log
echo - Aplicaci√≥n GUI: Log interno en la interfaz
) > "dist\README.txt"

echo ‚úì Documentaci√≥n creada

REM Verificar que ambos ejecutables se crearon
if not exist "dist\ZKTeco-Sync.exe" (
    echo ERROR: No se gener√≥ ZKTeco-Sync.exe
    pause
    exit /b 1
)

if not exist "dist\zkteco_service.exe" (
    echo ERROR: No se gener√≥ zkteco_service.exe
    pause
    exit /b 1
)

echo.
echo ==========================================
echo Verificando construcci√≥n
echo ==========================================

echo Contenido del directorio dist:
dir "dist" /b

echo.
echo Tama√±os de archivo:
for %%f in ("dist\*.exe") do (
    for /f "tokens=3" %%s in ('dir "%%f" ^| findstr /r "[0-9].*\.exe"') do (
        echo   %%~nxf: %%s bytes
    )
)

echo.
echo ==========================================
echo ‚úì Construcci√≥n completada exitosamente
echo ==========================================
echo.
echo Archivos generados en el directorio 'dist\':
echo - ZKTeco-Sync.exe          ^(Aplicaci√≥n GUI^)
echo - zkteco_service.exe       ^(Servicio Windows^)
echo - install_service.bat      ^(Instalador^)
echo - uninstall_service.bat    ^(Desinstalador^)
echo - config\device.json       ^(Configuraci√≥n^)
echo - logs\                    ^(Directorio de logs^)
echo - README.txt               ^(Documentaci√≥n^)
echo.
echo PR√ìXIMOS PASOS:
echo 1. Edite dist\config\device.json con los datos de su dispositivo
echo 2. Para usar como servicio: Ejecute dist\install_service.bat como Admin
echo 3. Para usar GUI: Ejecute dist\ZKTeco-Sync.exe
echo.
echo La aplicaci√≥n estar√° disponible en: http://127.0.0.1:3322/estado
echo.

REM Limpiar archivos temporales de PyInstaller
echo Limpiando archivos temporales...
if exist "build" rmdir /s /q build >nul 2>&1
if exist "*.spec" del "*.spec" >nul 2>&1

echo ‚úì Limpieza completada

echo Presione cualquier tecla para continuar...
pause >nul

exit /b 0

‚îú‚îÄ‚îÄ ZKTeco-Sync-installer.iss 
    [Setup]
AppName=ZKTeco Sync
AppVersion=1.1
AppPublisher=Sistema de Asistencias
DefaultDirName={autopf}\ZKTeco Sync
DefaultGroupName=ZKTeco Sync
AllowNoIcons=yes
LicenseFile=LICENSE.txt
InfoBeforeFile=README.txt
OutputDir=output
OutputBaseFilename=ZKTeco-Sync-Setup-v1.1
Compression=lzma
SolidCompression=yes
WizardStyle=modern
PrivilegesRequired=admin
SetupLogging=yes

[Languages]
Name: "spanish"; MessagesFile: "compiler:Languages\Spanish.isl"

[Tasks]
Name: "desktopicon"; Description: "Crear acceso directo en el escritorio"; GroupDescription: "Accesos directos adicionales:"; Flags: unchecked
Name: "installservice"; Description: "Instalar servicio de Windows (recomendado)"; GroupDescription: "Servicios:"; Flags: checkedonce

[Files]
; Archivo principal ejecutable (GUI)
Source: "dist\ZKTeco-Sync.exe"; DestDir: "{app}"; Flags: ignoreversion
; Servicio de Windows
Source: "dist\zkteco_service.exe"; DestDir: "{app}"; Flags: ignoreversion
; Scripts de instalaci√≥n/desinstalaci√≥n del servicio
Source: "install_service.bat"; DestDir: "{app}"; DestName: "install_service.bat"; Flags: ignoreversion
Source: "uninstall_service.bat"; DestDir: "{app}"; DestName: "uninstall_service.bat"; Flags: ignoreversion
; Documentaci√≥n
Source: "README.txt"; DestDir: "{app}"; Flags: ignoreversion
Source: "requirements.txt"; DestDir: "{app}"; Flags: ignoreversion

[Icons]
Name: "{group}\ZKTeco Sync"; Filename: "{app}\ZKTeco-Sync.exe"
Name: "{group}\Instalar Servicio"; Filename: "{app}\install_service.bat"; IconFilename: "{sys}\shell32.dll"; IconIndex: 21
Name: "{group}\Desinstalar Servicio"; Filename: "{app}\uninstall_service.bat"; IconFilename: "{sys}\shell32.dll"; IconIndex: 131
Name: "{group}\Verificar Estado"; Filename: "http://127.0.0.1:3322/estado"; IconFilename: "{sys}\shell32.dll"; IconIndex: 14
Name: "{group}\Desinstalar ZKTeco Sync"; Filename: "{uninstallexe}"
Name: "{autodesktop}\ZKTeco Sync"; Filename: "{app}\ZKTeco-Sync.exe"; Tasks: desktopicon

[Run]
; Ejecutar la aplicaci√≥n al final (opcional, no marcado por defecto)
Filename: "{app}\ZKTeco-Sync.exe"; Description: "Ejecutar ZKTeco Sync"; Flags: nowait postinstall skipifsilent unchecked

[UninstallDelete]
Type: filesandordirs; Name: "{app}\logs"
Type: filesandordirs; Name: "{app}\config"

[Code]
function InitializeSetup(): Boolean;
begin
  Result := True;
end;

procedure CurStepChanged(CurStep: TSetupStep);
var
  ResultCode: Integer;
begin
  if CurStep = ssPostInstall then
  begin
    // Crear carpetas necesarias
    CreateDir(ExpandConstant('{app}\logs'));
    CreateDir(ExpandConstant('{app}\config'));
    
    // Crear archivo de configuraci√≥n por defecto si no existe
    if not FileExists(ExpandConstant('{app}\config\device.json')) then
    begin
      SaveStringToFile(ExpandConstant('{app}\config\device.json'),
        '{' + #13#10 +
        '  "id": "1",' + #13#10 +
        '  "name": "Dispositivo ZKTeco",' + #13#10 +
        '  "ip_address": "192.168.1.100",' + #13#10 +
        '  "port": 4370' + #13#10 +
        '}', False);
    end;
    
    // Si se seleccion√≥ instalar servicio, instalarlo autom√°ticamente
    if IsTaskSelected('installservice') then
    begin
      MsgBox('Instalando servicio ZKTeco Sync...' + #13#10 + #13#10 +
             'El servicio se instalar√° autom√°ticamente y se iniciar√°.' + #13#10 +
             'Esto puede tomar unos momentos.',
             mbInformation, MB_OK);
             
      // Ejecutar install_service.bat
      if Exec(ExpandConstant('{app}\install_service.bat'), '', ExpandConstant('{app}'), 
              SW_HIDE, ewWaitUntilTerminated, ResultCode) then
      begin
        if ResultCode = 0 then
        begin
          MsgBox('‚úì Servicio ZKTeco Sync instalado e iniciado correctamente.' + #13#10 + #13#10 +
                 'El servicio est√° ejecut√°ndose en segundo plano y proporciona' + #13#10 +
                 'una API REST en: http://127.0.0.1:3322' + #13#10 + #13#10 +
                 'Puede abrir la aplicaci√≥n GUI en cualquier momento para' + #13#10 +
                 'monitorear el estado del servicio.',
                 mbInformation, MB_OK);
        end
        else
        begin
          MsgBox('‚ö†Ô∏è Hubo un problema al instalar el servicio.' + #13#10 + #13#10 +
                 'C√≥digo de error: ' + IntToStr(ResultCode) + #13#10 + #13#10 +
                 'Puede intentar instalar manualmente ejecutando' + #13#10 +
                 'install_service.bat como Administrador.',
                 mbError, MB_OK);
        end;
      end
      else
      begin
        MsgBox('‚ùå No se pudo ejecutar el instalador del servicio.' + #13#10 + #13#10 +
               'Ejecute manualmente install_service.bat como Administrador.',
               mbError, MB_OK);
      end;
    end
    else
    begin
      // Si no se instal√≥ servicio, informar c√≥mo hacerlo
      MsgBox('Instalaci√≥n completada.' + #13#10 + #13#10 +
             'NOTA: No se instal√≥ el servicio de Windows.' + #13#10 +
             'Para usar todas las funcionalidades, ejecute' + #13#10 +
             'install_service.bat como Administrador.',
             mbInformation, MB_OK);
    end;
  end;
end;

procedure CurUninstallStepChanged(CurUninstallStep: TUninstallStep);
var
  ResultCode: Integer;
begin
  if CurUninstallStep = usUninstall then
  begin
    // Verificar si el servicio existe antes de preguntar
    if (Exec(ExpandConstant('{cmd}'), '/c sc query ZKTecoSync', '', SW_HIDE, ewWaitUntilTerminated, ResultCode)) and (ResultCode = 0) then
    begin
      if MsgBox('¬øDesea eliminar tambi√©n el servicio ZKTeco Sync?' + #13#10 + 
                '(Recomendado para una desinstalaci√≥n completa)', 
                mbConfirmation, MB_YESNO) = IDYES then
      begin
        // Detener servicio
        Exec(ExpandConstant('{cmd}'), '/c net stop ZKTecoSync', '', SW_HIDE, ewWaitUntilTerminated, ResultCode);
        Sleep(2000);
        
        // Intentar eliminar usando el ejecutable
        if FileExists(ExpandConstant('{app}\zkteco_service.exe')) then
        begin
          Exec(ExpandConstant('{app}\zkteco_service.exe'), 'remove', 
               ExpandConstant('{app}'), SW_HIDE, ewWaitUntilTerminated, ResultCode);
        end;
        
        // Si falla, intentar eliminaci√≥n manual
        if ResultCode <> 0 then
          Exec(ExpandConstant('{cmd}'), '/c sc delete ZKTecoSync', '', SW_HIDE, ewWaitUntilTerminated, ResultCode);
          
        if ResultCode = 0 then
          MsgBox('‚úì Servicio eliminado correctamente.', mbInformation, MB_OK)
        else
          MsgBox('‚ö†Ô∏è Hubo un problema al eliminar el servicio.' + #13#10 +
                 'Puede eliminarlo manualmente desde Servicios de Windows.', mbError, MB_OK);
      end;
    end;
  end;
end;